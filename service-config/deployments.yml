apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-12T12:30:21Z"
    generation: 1
    labels:
      com.docker.default-service-type: ""
      com.docker.deploy-namespace: docker
      com.docker.fry: compose
      com.docker.image-tag: v0.4.25-alpha1
    name: compose
    namespace: docker
    resourceVersion: "700698"
    selfLink: /apis/apps/v1/namespaces/docker/deployments/compose
    uid: c80dd2cf-cb54-42af-8818-dbbb660ac5cf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        com.docker.default-service-type: ""
        com.docker.deploy-namespace: docker
        com.docker.fry: compose
        com.docker.image-tag: v0.4.25-alpha1
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          com.docker.default-service-type: ""
          com.docker.deploy-namespace: docker
          com.docker.fry: compose
          com.docker.image-tag: v0.4.25-alpha1
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
        containers:
        - args:
          - --kubeconfig
          - ""
          - --reconciliation-interval
          - 12h0m0s
          - --healthz-check-port
          - "0"
          image: docker/kube-compose-controller:v0.4.25-alpha1
          imagePullPolicy: IfNotPresent
          name: compose
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: compose
        serviceAccountName: compose
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-12T12:30:21Z"
      lastUpdateTime: "2020-05-12T12:30:51Z"
      message: ReplicaSet "compose-78f95d4f8c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-05-25T13:04:50Z"
      lastUpdateTime: "2020-05-25T13:04:50Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-12T12:30:20Z"
    generation: 1
    labels:
      com.docker.deploy-namespace: docker
      com.docker.fry: compose.api
      com.docker.image-tag: v0.4.25-alpha1
    name: compose-api
    namespace: docker
    resourceVersion: "700681"
    selfLink: /apis/apps/v1/namespaces/docker/deployments/compose-api
    uid: 212ebbf9-7553-4c6b-a87c-015e5582924a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        com.docker.deploy-namespace: docker
        com.docker.fry: compose.api
        com.docker.image-tag: v0.4.25-alpha1
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          com.docker.deploy-namespace: docker
          com.docker.fry: compose.api
          com.docker.image-tag: v0.4.25-alpha1
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
        containers:
        - args:
          - --kubeconfig
          - ""
          - --authentication-kubeconfig=
          - --authorization-kubeconfig=
          - --service-name=compose-api
          - --service-namespace
          - docker
          - --healthz-check-port
          - "0"
          - --etcd-servers=https://127.0.0.1:2379
          - --etcd-cafile=/etc/docker-compose/etcd/ca.crt
          - --etcd-certfile=/etc/docker-compose/etcd/client.crt
          - --etcd-keyfile=/etc/docker-compose/etcd/client.key
          - --secure-port=9443
          image: docker/kube-compose-api-server:v0.4.25-alpha1
          imagePullPolicy: IfNotPresent
          name: compose
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/docker-compose/etcd
            name: etcd-secret
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: compose
        serviceAccountName: compose
        terminationGracePeriodSeconds: 30
        volumes:
        - name: etcd-secret
          secret:
            defaultMode: 420
            items:
            - key: ca
              path: ca.crt
            - key: cert
              path: client.crt
            - key: key
              path: client.key
            secretName: compose-etcd
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-12T12:30:20Z"
      lastUpdateTime: "2020-05-12T12:30:46Z"
      message: ReplicaSet "compose-api-6ffb89dc58" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-05-25T13:04:48Z"
      lastUpdateTime: "2020-05-25T13:04:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-05-12T12:29:17Z"
    generation: 1
    labels:
      k8s-app: kube-dns
    name: coredns
    namespace: kube-system
    resourceVersion: "700674"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/coredns
    uid: 7174a5ab-14af-4a86-8efa-55845c740024
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.6.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2020-05-12T12:29:23Z"
      lastUpdateTime: "2020-05-12T12:30:05Z"
      message: ReplicaSet "coredns-5644d7b6d9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-05-25T13:04:47Z"
      lastUpdateTime: "2020-05-25T13:04:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
        name: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-preferred-address-types=InternalIP #tentativa de correcao
          - "--kubelet-insecure-tls" #tentativa de correção
          image: k8s.gcr.io/metrics-server-amd64:v0.3.6
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 4443
            name: main-port
            protocol: TCP
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/arch: amd64
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-05-29T02:51:26Z"
      lastUpdateTime: "2020-05-29T02:51:26Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2020-05-29T02:51:14Z"
      lastUpdateTime: "2020-05-29T02:51:26Z"
      message: ReplicaSet "metrics-server-58c885686f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
